#!/usr/bin/perl

use EPrints;
use Switch;

my $repository = EPrints->new->current_repository;
my $eprintid = $repository->param("eprintid");
my @astorids = $repository->param('astorids[]');      
my $security = $repository->param("security");
my $license = $repository->param("license");
my $de = $repository->param("date_embargo") || undef;

my $de_year = $repository->param("date_embargo_year");
my $de_month = $repository->param("date_embargo_month");
my $de_day = $repository->param("date_embargo_day");

die("EPrintid is malformed: $eprintid") unless($eprintid=~ /^\d+$/);
#TODO check against namedset
die("Security is not known: $security") unless(!defined $security || grep $_ eq $security, qw(public validuser staffonly));
#die("License is not known: $license") unless(grep $_ eq $license, qw());
print STDERR "LICENSE: ".$license."\n";
die("License is malformed: $license") unless(!defined $license || $license ne "" || $license=~ /^[\w_]+$/);
die("Date embargo is malformed: $de") unless(!defined $de || $de ne "" || $de =~ qr/\d\d\d\d(?:-\d\d(?:-\d\d)?)?/);

my $eprint = EPrints::DataObj::EPrint->new( $repository, $eprintid );
my $user = $repository->current_user;
#Lets modify the document md
for my $doc($eprint->get_all_documents){
	next if(!$doc->is_set("astorid")); #ignore local documents
	next if(!grep $_ eq $doc->value("astorid"), @astorids); #ignore unselected docs
	next if(!$doc->permit("document/view",$user)); #ignore any unpermitted docs that may have snuck through....

	$doc->set_value("security",$security) if(defined $security);
	$doc->set_value("license",$license) if(defined $license);
	$doc->set_value("date_embargo",$de) if(defined $de || (!defined && $security eq "public"));
	$doc->commit;
}

## Return json for all documents
my $plugin = $repository->plugin( "Export::ArkivumFiles" );
my $list = $repository->get_dataset("document")->search(filters => [
				{ meta_fields => [qw( eprintid )], value => $eprintid },
			]);
$plugin->initialise_fh( \*STDOUT );	
$repository->send_http_header( "content_type"=>$plugin->param("mimetype") );
#$plugin->output_list( fh=>\*STDOUT, list=>$list );
print $plugin->output_dataobj( $eprint );

